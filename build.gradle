/*
Copyright 2019-present, Simon Data, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at:
http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'
apply plugin: 'signing'
apply plugin: 'application'
apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: "com.jfrog.artifactory"
apply plugin: "org.sonarqube"
apply plugin: "jacoco"

mainClassName = 'com.simondata.sqlextractor.ExtractorRunner'
sourceCompatibility = 1.8
targetCompatibility = 1.8

sonar {
  properties {
    property "sonar.projectKey", "Radico_sql-extractor_AYd25Xlaprd0TMWfsvuo"
    property "sonar.host.url", "https://sonar.production.simondata.co"
    property "sonar.token", System.getenv("SONAR_TOKEN")
    property "sonar.java.jdkHome", "/Library/Java/JavaVirtualMachines/zulu-17.jdk/Contents/Home"
    property "sonar.coverage.jacoco.xmlReportPaths", "reports/jacoco"
  }
}

jacoco {
    toolVersion = "0.8.8"
    reportsDirectory = layout.buildDirectory.dir('reports/jacoco')
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

repositories {
    maven {
        name = "artifactory"
        url "https://simondata.jfrog.io/artifactory/maven-local"
        credentials {
            username = System.getenv("ARTIFACTORY_USER")
            password = System.getenv("ARTIFACTORY_PASSWORD")
        }
        metadataSources {
            artifact()
        }
    }
    mavenCentral()
    maven {
        url "https://s3.amazonaws.com/redshift-maven-repository/release"
    }
    maven {
      name = 'ajoberstar-backup'
      url = 'https://ajoberstar.org/bintray-backup/'
    }
}

dependencies {
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.36'
    implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.36'
    implementation group: 'commons-cli', name: 'commons-cli', version: '1.5.0'
    implementation group: 'commons-dbutils', name: 'commons-dbutils', version: '1.7'
    implementation 'org.apache.commons:commons-text:1.10.0'
    implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'com.google.guava:guava:31.1-jre'
    implementation group: 'com.ibm.informix', name: 'jdbc', version: '4.10.14'
    implementation group: 'com.microsoft.sqlserver', name: 'mssql-jdbc', version: '10.2.3.jre8'
    implementation group: 'com.amazon.redshift', name: 'redshift-jdbc42', version: '2.1.0.14'
    //implementation group: 'com.amazon.redshift', name: 'redshift-jdbc42', version: '1.2.43.1067'
    implementation group: 'com.mysql', name: 'mysql-connector-j', version: '8.0.33'
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.6.0'
    implementation group: 'net.snowflake', name: 'snowflake-jdbc', version: '3.13.30'
    implementation group: 'com.syncron.amazonaws', name: 'simba-athena-jdbc-driver', version: '2.0.36.1001'
    testImplementation group: 'junit', name: 'junit', version: '4.13.2'

    constraints {
        implementation("org.apache.logging.log4j:log4j-core") {
            version {
                strictly("[2.18.0, 3[")
                prefer("2.20.0")
            }
            because("CVE-2021-44228, CVE-2021-45046, CVE-2021-45105: Log4j vulnerable to remote code execution and other critical security vulnerabilities")
        }
    }
}

buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
        maven {
            url 'https://simondata.jfrog.io/artifactory/gradle-virtual'
            credentials {
                username = System.getenv("ARTIFACTORY_USER")
                password = System.getenv("ARTIFACTORY_PASSWORD")
            }
        }
    }
    dependencies {
        classpath "gradle.plugin.com.github.johnrengelman:shadow:8.0.0"
        classpath 'net.researchgate:gradle-release:2.6.0'
        classpath 'org.ajoberstar:gradle-git-publish:3.0.0'
        //Check for the latest version here: http://plugins.gradle.org/plugin/com.jfrog.artifactory
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4+"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:4.0.0.2929"

        constraints {
            classpath("org.apache.logging.log4j:log4j-core") {
                version {
                    strictly("[2.18.0, 3[")
                    prefer("2.20.0")
                }
                because("CVE-2021-44228, CVE-2021-45046, CVE-2021-45105: Log4j vulnerable to remote code execution and other critical security vulnerabilities")
            }
        }
    }
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile){
            options.compilerArgs << "-Xlint:deprecation"
        }
    }
}

allprojects {
    apply plugin: "com.jfrog.artifactory"
}

task sourceJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

publishing {
    publications {
        shadow(MavenPublication) { publication ->
            from project.shadow.component(publication)
            artifactId = 'sql-extractor'
            artifact sourceJar
            artifact shadowJar
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'SQL Extractor'
                description = 'A flexible SQL querying library'
                url = 'http://www.github.com/simon-data/sql-extractor'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'chetmancini'
                        name = 'Chet Mancini'
                        email = 'chetmancini@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/simon-data/sql-extractor.git'
                    developerConnection = 'scm:git:ssh://github.com/simon-data/sql-extractor.git'
                    url = 'http://github.com/simon-data/sql-extractor'
                }
            }
        }
    }
    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = "$buildDir/repos/releases"
            def snapshotsRepoUrl = "$buildDir/repos/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

signing {
    setRequired {
        // signing is only required if the artifacts are to be published
        gradle.taskGraph.allTasks.any { it.equals( PublishToMavenRepository) }
    }
}

artifactory {
    contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
    publish {
        repository {
            repoKey = 'gradle-int'
            username = System.getenv("ARTIFACTORY_USER")
            password = System.getenv("ARTIFACTORY_PASSWORD")
            maven = true

        }
        defaults {
            publications ('shadow')
            //List of Gradle Configurations (names or objects) from which to collect the list of artifacts to be deployed to Artifactory.
            publishBuildInfo = false
            publishPom = false
            publishIvy = false
        }
    }
    resolve {
        repository {
            repoKey = 'gradle-virtual'
            username = System.getenv("ARTIFACTORY_USER")
            password = System.getenv("ARTIFACTORY_PASSWORD")
            maven = true

        }
    }
}
